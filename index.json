{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Subatomix.Logging API Reference",
    "keywords": "Subatomix.Logging API Reference <!-- Copyright 2022 Jeffrey Sharp Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. -->"
  },
  "api/Subatomix.Logging.Legacy/Sharp.Diagnostics.Logging.html": {
    "href": "api/Subatomix.Logging.Legacy/Sharp.Diagnostics.Logging.html",
    "title": "Namespace Sharp.Diagnostics.Logging",
    "keywords": "Namespace Sharp.Diagnostics.Logging Classes Log Convenience methods for logging. TraceOperation Represents a logical operation whose start and end are logged."
  },
  "api/Subatomix.Logging.Legacy/Sharp.Diagnostics.Logging.Log.html": {
    "href": "api/Subatomix.Logging.Legacy/Sharp.Diagnostics.Logging.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Convenience methods for logging. Inheritance System.Object Log Namespace : Sharp.Diagnostics.Logging Assembly : Subatomix.Logging.Legacy.dll Syntax public static class Log : Object Remarks This type is a compatibility shim to assist migration from the Sharp.Diagnostics.Logging package. New code should use Microsoft.Extensions.Logging.ILogger . Properties ActivityId Gets the identifier of the current logical activity. Declaration public static Guid ActivityId { get; } Property Value Type Description System.Guid CloseOnExit Enables or disables logging of application termination and automatic closing of attached listeners. Declaration public static bool CloseOnExit { get; set; } Property Value Type Description System.Boolean LogAllThrownExceptions Enables or disables logging of ALL thrown exceptions — even caught exceptions. Declaration public static bool LogAllThrownExceptions { get; set; } Property Value Type Description System.Boolean Remarks ⚠ WARNING: This results in an extremely noisy log and degrades application performance. Setting this property is not a thread-safe operation. Logger Gets or sets the Microsoft.Extensions.Logging.ILogger instance to which the static methods of this class foward invocations. Declaration public static ILogger Logger { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger Exceptions Type Condition System.ArgumentNullException Attempted to set the value of the property to null Methods Close() Does nothing. Declaration public static void Close() Critical(Exception) Writes a critical error entry to the log. Declaration public static void Critical(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Critical(Int32, Exception) Writes a critical error entry to the log. Declaration public static void Critical(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Critical(Int32, String) Writes a critical error entry to the log. Declaration public static void Critical(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Critical(Int32, String, Object[]) Writes a critical error entry to the log. Declaration public static void Critical(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Critical(String) Writes a critical error entry to the log. Declaration public static void Critical(string message) Parameters Type Name Description System.String message A message for the entry. Critical(String, Object[]) Writes a critical error entry to the log. Declaration public static void Critical(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Data(TraceEventType, Int32, Object) Writes arbitrary object data to the log. Declaration public static void Data(TraceEventType eventType, int id, object data) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of event to write. System.Int32 id A numeric identifier for the event. System.Object data The object data to include in the event. Data(TraceEventType, Int32, Object[]) Writes arbitrary object data to the log. Declaration public static void Data(TraceEventType eventType, int id, params object[] data) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.Int32 id A numeric identifier for the entry. System.Object [] data The object data to include in the entry. Data(TraceEventType, Object) Writes arbitrary object data to the log. Declaration public static void Data(TraceEventType eventType, object data) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of event to write. System.Object data The object data to include in the event. Data(TraceEventType, Object[]) Writes arbitrary object data to the log. Declaration public static void Data(TraceEventType eventType, params object[] data) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.Object [] data The object data to include in the entry. Do(String, Action) Runs a logical operation, writing start, stop, and error entries to the log. Declaration public static void Do(string name, Action action) Parameters Type Name Description System.String name The name of the operation. System.Action action The operation. Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. Do<T>(String, Func<T>) Runs a logical operation, writing start, stop, and error entries to the log. Declaration public static T Do<T>(string name, Func<T> action) Parameters Type Name Description System.String name The name of the operation. System.Func <T> action The operation. Returns Type Description T Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. System.ArgumentNullException action is null . DoAsync(String, Func<Task>) Runs a logical operation, writing start, stop, and error entries to the log. Declaration public static Task DoAsync(string name, Func<Task> action) Parameters Type Name Description System.String name The name of the operation. System.Func < System.Threading.Tasks.Task > action The operation. Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. DoAsync<T>(String, Func<Task<T>>) Runs a logical operation, writing start, stop, and error entries to the log. Declaration public static Task<T> DoAsync<T>(string name, Func<Task<T>> action) Parameters Type Name Description System.String name The name of the operation. System.Func < System.Threading.Tasks.Task <T>> action The operation. Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. System.ArgumentNullException action is null . Error(Exception) Writes an error entry to the log. Declaration public static void Error(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Error(Int32, Exception) Writes an error entry to the log. Declaration public static void Error(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Error(Int32, String) Writes an error entry to the log. Declaration public static void Error(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Error(Int32, String, Object[]) Writes an error entry to the log. Declaration public static void Error(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Error(String) Writes an error entry to the log. Declaration public static void Error(string message) Parameters Type Name Description System.String message A message for the entry. Error(String, Object[]) Writes an error entry to the log. Declaration public static void Error(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Event(TraceEventType, Int32) Writes an entry to the log. Declaration public static void Event(TraceEventType eventType, int id) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.Int32 id A numeric identifier for the entry. Event(TraceEventType, Int32, String) Writes an entry to the log. Declaration public static void Event(TraceEventType eventType, int id, string message) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Event(TraceEventType, Int32, String, Object[]) Writes an entry to the log. Declaration public static void Event(TraceEventType eventType, int id, string format, params object[] args) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Event(TraceEventType, String) Writes an entry to the log. Declaration public static void Event(TraceEventType eventType, string message) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.String message A message for the entry. Event(TraceEventType, String, Object[]) Writes an entry to the log. Declaration public static void Event(TraceEventType eventType, string format, params object[] args) Parameters Type Name Description System.Diagnostics.TraceEventType eventType The type of entry to write. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Flush() Does nothing. Declaration public static void Flush() GetOperationStack() Gets the current stack of logial operations. Declaration public static object[] GetOperationStack() Returns Type Description System.Object [] A new array containing the objects in the logical operation stack, ordered from top to bottom. Information(Exception) Writes an informational entry to the log. Declaration public static void Information(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Information(Int32, Exception) Writes an informational entry to the log. Declaration public static void Information(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Information(Int32, String) Writes an informational entry to the log. Declaration public static void Information(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Information(Int32, String, Object[]) Writes an informational entry to the log. Declaration public static void Information(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Information(String) Writes an informational entry to the log. Declaration public static void Information(string message) Parameters Type Name Description System.String message A message for the entry. Information(String, Object[]) Writes an informational entry to the log. Declaration public static void Information(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Operation(String) Starts a logical operation, writing a start entry to the log. Declaration public static TraceOperation Operation(string name = null) Parameters Type Name Description System.String name The name of the operation. If omitted, the default is the name of the calling member, if supported by the compiler. Returns Type Description TraceOperation A TraceOperation representing the logical operation. When disposed, the object writes stop and error entries to the log. Exceptions Type Condition System.ArgumentNullException name is null . System.ArgumentException name is empty. Resume(Exception) Writes a resume entry to the log. Declaration public static void Resume(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Resume(Int32, Exception) Writes a resume entry to the log. Declaration public static void Resume(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Resume(Int32, String) Writes a resume entry to the log. Declaration public static void Resume(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Resume(Int32, String, Object[]) Writes a resume entry to the log. Declaration public static void Resume(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Resume(String) Writes a resume entry to the log. Declaration public static void Resume(string message) Parameters Type Name Description System.String message A message for the entry. Resume(String, Object[]) Writes a resume entry to the log. Declaration public static void Resume(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Start(Exception) Writes a start entry to the log. Declaration public static void Start(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Start(Int32, Exception) Writes a start entry to the log. Declaration public static void Start(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Start(Int32, String) Writes a start entry to the log. Declaration public static void Start(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Start(Int32, String, Object[]) Writes a start entry to the log. Declaration public static void Start(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Start(String) Writes a start entry to the log. Declaration public static void Start(string message) Parameters Type Name Description System.String message A message for the entry. Start(String, Object[]) Writes a start entry to the log. Declaration public static void Start(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Stop(Exception) Writes a stop entry to the log. Declaration public static void Stop(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Stop(Int32, Exception) Writes a stop entry to the log. Declaration public static void Stop(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Stop(Int32, String) Writes a stop entry to the log. Declaration public static void Stop(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Stop(Int32, String, Object[]) Writes a stop entry to the log. Declaration public static void Stop(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Stop(String) Writes a stop entry to the log. Declaration public static void Stop(string message) Parameters Type Name Description System.String message A message for the entry. Stop(String, Object[]) Writes a stop entry to the log. Declaration public static void Stop(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Suspend(Exception) Writes a suspend entry to the log. Declaration public static void Suspend(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Suspend(Int32, Exception) Writes a suspend entry to the log. Declaration public static void Suspend(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Suspend(Int32, String) Writes a suspend entry to the log. Declaration public static void Suspend(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Suspend(Int32, String, Object[]) Writes a suspend entry to the log. Declaration public static void Suspend(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Suspend(String) Writes a suspend entry to the log. Declaration public static void Suspend(string message) Parameters Type Name Description System.String message A message for the entry. Suspend(String, Object[]) Writes a suspend entry to the log. Declaration public static void Suspend(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Transfer(Int32, String, Guid) Writes an entry to the log, reporting a new identifier for the current logical activity. Declaration public static void Transfer(int id, string message, Guid newActivityId) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. System.Guid newActivityId A new identifier for the current logical activity. Remarks This method is intended for use with the logical activities of a System.Diagnostics.CorrelationManager . The newActivityId parameter relates to the System.Diagnostics.CorrelationManager.ActivityId property. If a logical operation begins in one activity and transfers to another, the second activity should log the transfer by calling this method. The call relates the new activity identifier to the previous identifier. An example consumer of this functionality is a trace viewer that can report logical operations spanning multiple activities. Transfer(String, Guid) Writes an entry to the log, reporting a new identifier for the current logical activity. Declaration public static void Transfer(string message, Guid newActivityId) Parameters Type Name Description System.String message A message for the entry. System.Guid newActivityId A new identifier for the current logical activity. Remarks This method is intended for use with the logical activities of a System.Diagnostics.CorrelationManager . The newActivityId parameter relates to the System.Diagnostics.CorrelationManager.ActivityId property. If a logical operation begins in one activity and transfers to another, the second activity should log the transfer by calling this method. The call relates the new activity identifier to the previous identifier. An example consumer of this functionality is a trace viewer that can report logical operations spanning multiple activities. Verbose(Exception) Writes a verbose entry to the log. Declaration public static void Verbose(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Verbose(Int32, Exception) Writes a verbose entry to the log. Declaration public static void Verbose(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Verbose(Int32, String) Writes a verbose entry to the log. Declaration public static void Verbose(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Verbose(Int32, String, Object[]) Writes a verbose entry to the log. Declaration public static void Verbose(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Verbose(String) Writes a verbose entry to the log. Declaration public static void Verbose(string message) Parameters Type Name Description System.String message A message for the entry. Verbose(String, Object[]) Writes a verbose entry to the log. Declaration public static void Verbose(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Warning(Exception) Writes a warning entry to the log. Declaration public static void Warning(Exception exception) Parameters Type Name Description System.Exception exception An exception to report in the entry. Warning(Int32, Exception) Writes a warning entry to the log. Declaration public static void Warning(int id, Exception exception) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.Exception exception An exception to report in the entry. Warning(Int32, String) Writes a warning entry to the log. Declaration public static void Warning(int id, string message) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String message A message for the entry. Warning(Int32, String, Object[]) Writes a warning entry to the log. Declaration public static void Warning(int id, string format, params object[] args) Parameters Type Name Description System.Int32 id A numeric identifier for the entry. System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args . Warning(String) Writes a warning entry to the log. Declaration public static void Warning(string message) Parameters Type Name Description System.String message A message for the entry. Warning(String, Object[]) Writes a warning entry to the log. Declaration public static void Warning(string format, params object[] args) Parameters Type Name Description System.String format A format string to build a message for the entry. System.Object [] args The objects to substitute into the format string. Exceptions Type Condition System.ArgumentNullException format is null . System.FormatException format is invalid or specifies an argument position not present in args ."
  },
  "api/Subatomix.Logging.Legacy/Sharp.Diagnostics.Logging.TraceOperation.html": {
    "href": "api/Subatomix.Logging.Legacy/Sharp.Diagnostics.Logging.TraceOperation.html",
    "title": "Class TraceOperation",
    "keywords": "Class TraceOperation Represents a logical operation whose start and end are logged. Inheritance System.Object TraceOperation Namespace : Sharp.Diagnostics.Logging Assembly : Subatomix.Logging.Legacy.dll Syntax public class TraceOperation : ActivityScope Remarks This type is a compatibility shim to assist migration from the Sharp.Diagnostics.Logging package. New code should use Microsoft.Extensions.Logging.ILogger and one of the Activity or Operation extension methods provided by LoggerExtensions . Constructors TraceOperation(TraceSource, String) Initializes a new TraceOperation instance with the specified trace source and operation name. Declaration public TraceOperation(TraceSource trace, string name = null) Parameters Type Name Description System.Diagnostics.TraceSource trace Not used. System.String name The name of the operation. If omitted, the default is the name of the calling member, if supported by the compiler. Exceptions Type Condition System.ArgumentNullException name is null . System.ArgumentException name is empty. TraceOperation(String) Initializes a new TraceOperation instance with the specified operation name. Declaration public TraceOperation(string name = null) Parameters Type Name Description System.String name The name of the operation. If omitted, the default is the name of the calling member, if supported by the compiler. Exceptions Type Condition System.ArgumentNullException name is null . System.ArgumentException name is empty. Properties ElapsedTime Gets the duration elapsed since the operation started. Declaration public TimeSpan ElapsedTime { get; } Property Value Type Description System.TimeSpan StartTime Gets the UTC time when the operation started. Declaration public DateTime StartTime { get; } Property Value Type Description System.DateTime Methods Do(TraceSource, String, Action) Runs a logical operation, writing start, stop, and error entries. Declaration public static void Do(TraceSource trace, string name, Action action) Parameters Type Name Description System.Diagnostics.TraceSource trace Not used. System.String name The name of the operation. System.Action action The operation. Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. Do(String, Action) Runs a logical operation, writing start, stop, and error entries. Declaration public static void Do(string name, Action action) Parameters Type Name Description System.String name The name of the operation. System.Action action The operation. Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. Do<TResult>(TraceSource, String, Func<TResult>) Runs a logical operation, writing start, stop, and error entries. Declaration public static TResult Do<TResult>(TraceSource trace, string name, Func<TResult> action) Parameters Type Name Description System.Diagnostics.TraceSource trace Not used. System.String name The name of the operation. System.Func <TResult> action The operation. Returns Type Description TResult Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. Do<TResult>(String, Func<TResult>) Runs a logical operation, writing start, stop, and error entries. Declaration public static TResult Do<TResult>(string name, Func<TResult> action) Parameters Type Name Description System.String name The name of the operation. System.Func <TResult> action The operation. Returns Type Description TResult Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. DoAsync(TraceSource, String, Func<Task>) Runs a logical operation asynchronously, writing start, stop, and error entries. Declaration public static Task DoAsync(TraceSource trace, string name, Func<Task> action) Parameters Type Name Description System.Diagnostics.TraceSource trace Not used. System.String name The name of the operation. System.Func < System.Threading.Tasks.Task > action The operation. Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. DoAsync(String, Func<Task>) Runs a logical operation asynchronously, writing start, stop, and error entries. Declaration public static Task DoAsync(string name, Func<Task> action) Parameters Type Name Description System.String name The name of the operation. System.Func < System.Threading.Tasks.Task > action The operation. Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. DoAsync<TResult>(TraceSource, String, Func<Task<TResult>>) Runs a logical operation asynchronously, writing start, stop, and error entries. Declaration public static Task<TResult> DoAsync<TResult>(TraceSource trace, string name, Func<Task<TResult>> action) Parameters Type Name Description System.Diagnostics.TraceSource trace Not used. System.String name The name of the operation. System.Func < System.Threading.Tasks.Task <TResult>> action The operation. Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty. DoAsync<TResult>(String, Func<Task<TResult>>) Runs a logical operation asynchronously, writing start, stop, and error entries. Declaration public static Task<TResult> DoAsync<TResult>(string name, Func<Task<TResult>> action) Parameters Type Name Description System.String name The name of the operation. System.Func < System.Threading.Tasks.Task <TResult>> action The operation. Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentNullException name and/or action is null . System.ArgumentException name is empty."
  },
  "api/Subatomix.Logging.Legacy/Subatomix.Logging.Legacy.CorrelationManagerActivityListener.html": {
    "href": "api/Subatomix.Logging.Legacy/Subatomix.Logging.Legacy.CorrelationManagerActivityListener.html",
    "title": "Class CorrelationManagerActivityListener",
    "keywords": "Class CorrelationManagerActivityListener A listener to flow System.Diagnostics.Activity start and stop events to the legacy System.Diagnostics.CorrelationManager facility. Inheritance System.Object CorrelationManagerActivityListener Implements System.IDisposable Namespace : Subatomix.Logging.Legacy Assembly : Subatomix.Logging.Legacy.dll Syntax public class CorrelationManagerActivityListener : Object Remarks An instance of this class listens for System.Diagnostics.Activity start and stop events, filtered by predicate methods. When an activity starts and is not excluded by predicate, the listener pushes System.Diagnostics.Activity.Id onto the System.Diagnostics.CorrelationManager.LogicalOperationStack . If the stack was empty, the listener also sets System.Diagnostics.CorrelationManager.ActivityId to a System.Guid derived deterministically from System.Diagnostics.Activity.Id . When an activity stops that was not excluded previously by predicate, the listener pops the current item from the System.Diagnostics.CorrelationManager.LogicalOperationStack . If the stack becomes empty, the listener also sets System.Diagnostics.CorrelationManager.ActivityId to System.Guid.Empty . Invoke the Register() method to begin listening for activity start and stop events. Dispose the listener to unregister. To limit which activity start and stop events flow to the correlation manager, override the ShouldFlow(ActivitySource) and/or ShouldFlow(Activity) methods. Constructors CorrelationManagerActivityListener() Initializes a new CorrelationManagerActivityListener instance. Declaration public CorrelationManagerActivityListener() Remarks Invoke the Register() method to begin listening for activity start and stop events. Dispose the listener to unregister. Methods Dispose() Stops listening for System.Diagnostics.Activity start and stop events. Disposes managed and unmanaged resources owned by the object. Declaration public void Dispose() Dispose(Boolean) Disposes resources owned by the object. Declaration protected virtual void Dispose(bool managed) Parameters Type Name Description System.Boolean managed Whether to dispose managed resources (in addition to unmanaged resources, which are always disposed). Register() Begins listening for System.Diagnostics.Activity start and stop events. Declaration public void Register() ShouldFlow(Activity) Determines whether the specified activity should flow to System.Diagnostics.CorrelationManager . Declaration protected virtual bool ShouldFlow(Activity activity) Parameters Type Name Description System.Diagnostics.Activity activity The activity to check. Returns Type Description System.Boolean true if activity should flow to the System.Diagnostics.CorrelationManager ; false otherwise. Remarks Derived classes can override this method to exclude unwanted activities. ShouldFlow(ActivitySource) Determines whether activities from the specified source should flow to the System.Diagnostics.CorrelationManager . Declaration protected virtual bool ShouldFlow(ActivitySource source) Parameters Type Name Description System.Diagnostics.ActivitySource source The activity source to check. Returns Type Description System.Boolean true if activities from source should flow to the System.Diagnostics.CorrelationManager ; false otherwise. Remarks Derived classes can override this method to exclude unwanted activity sources. Implements System.IDisposable"
  },
  "api/Subatomix.Logging.Legacy/Subatomix.Logging.Legacy.html": {
    "href": "api/Subatomix.Logging.Legacy/Subatomix.Logging.Legacy.html",
    "title": "Namespace Subatomix.Logging.Legacy",
    "keywords": "Namespace Subatomix.Logging.Legacy Classes CorrelationManagerActivityListener A listener to flow System.Diagnostics.Activity start and stop events to the legacy System.Diagnostics.CorrelationManager facility. LoggingTraceListener A trace listener that forwards trace events to Microsoft.Extensions.Logging.ILogger loggers."
  },
  "api/Subatomix.Logging.Legacy/Subatomix.Logging.Legacy.LoggingTraceListener.html": {
    "href": "api/Subatomix.Logging.Legacy/Subatomix.Logging.Legacy.LoggingTraceListener.html",
    "title": "Class LoggingTraceListener",
    "keywords": "Class LoggingTraceListener A trace listener that forwards trace events to Microsoft.Extensions.Logging.ILogger loggers. Inheritance System.Object LoggingTraceListener Namespace : Subatomix.Logging.Legacy Assembly : Subatomix.Logging.Legacy.dll Syntax public class LoggingTraceListener : TraceListener Constructors LoggingTraceListener() Initializes a new LoggingTraceListener instance. Declaration public LoggingTraceListener() Properties IsThreadSafe Gets a value indicating whether the trace listener is thread safe. Declaration public override bool IsThreadSafe { get; } Property Value Type Description System.Boolean true if the trace listener is thread safe; otherwise, false . The default is false . LoggerFactory Gets or sets the provider of loggers. Declaration public ILoggerFactory LoggerFactory { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILoggerFactory Methods Close() When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output. Declaration public override void Close() Dispose(Boolean) Releases the unmanaged resources used by the System.Diagnostics.TraceListener and optionally releases the managed resources. Declaration protected override void Dispose(bool managed) Parameters Type Name Description System.Boolean managed true to release both managed and unmanaged resources; false to release only unmanaged resources. Fail(String) Emits an error message to the listener you create when you implement the System.Diagnostics.TraceListener class. Declaration public override void Fail(string message) Parameters Type Name Description System.String message A message to emit. Fail(String, String) Emits an error message and a detailed error message to the listener you create when you implement the System.Diagnostics.TraceListener class. Declaration public override void Fail(string message, string detailMessage) Parameters Type Name Description System.String message A message to emit. System.String detailMessage A detailed message to emit. Flush() When overridden in a derived class, flushes the output buffer. Declaration public override void Flush() TraceData(TraceEventCache, String, TraceEventType, Int32, Object) Writes trace information, a data object and event information to the listener specific output. Declaration public override void TraceData(TraceEventCache context, string source, TraceEventType type, int id, object obj) Parameters Type Name Description System.Diagnostics.TraceEventCache context A System.Diagnostics.TraceEventCache object that contains the current process ID, thread ID, and stack trace information. System.String source A name used to identify the output, typically the name of the application that generated the trace event. System.Diagnostics.TraceEventType type One of the System.Diagnostics.TraceEventType values specifying the type of event that has caused the trace. System.Int32 id A numeric identifier for the event. System.Object obj The trace data to emit. TraceData(TraceEventCache, String, TraceEventType, Int32, Object[]) Writes trace information, a data object and event information to the listener specific output. Declaration public override void TraceData(TraceEventCache context, string source, TraceEventType type, int id, params object[] objs) Parameters Type Name Description System.Diagnostics.TraceEventCache context A System.Diagnostics.TraceEventCache object that contains the current process ID, thread ID, and stack trace information. System.String source A name used to identify the output, typically the name of the application that generated the trace event. System.Diagnostics.TraceEventType type One of the System.Diagnostics.TraceEventType values specifying the type of event that has caused the trace. System.Int32 id A numeric identifier for the event. System.Object [] objs The trace data to emit. TraceEvent(TraceEventCache, String, TraceEventType, Int32) Writes trace and event information to the listener specific output. Declaration public override void TraceEvent(TraceEventCache context, string source, TraceEventType type, int id) Parameters Type Name Description System.Diagnostics.TraceEventCache context A System.Diagnostics.TraceEventCache object that contains the current process ID, thread ID, and stack trace information. System.String source A name used to identify the output, typically the name of the application that generated the trace event. System.Diagnostics.TraceEventType type One of the System.Diagnostics.TraceEventType values specifying the type of event that has caused the trace. System.Int32 id A numeric identifier for the event. TraceEvent(TraceEventCache, String, TraceEventType, Int32, String) Writes trace information, a message, and event information to the listener specific output. Declaration public override void TraceEvent(TraceEventCache context, string source, TraceEventType type, int id, string message) Parameters Type Name Description System.Diagnostics.TraceEventCache context A System.Diagnostics.TraceEventCache object that contains the current process ID, thread ID, and stack trace information. System.String source A name used to identify the output, typically the name of the application that generated the trace event. System.Diagnostics.TraceEventType type One of the System.Diagnostics.TraceEventType values specifying the type of event that has caused the trace. System.Int32 id A numeric identifier for the event. System.String message A message to write. TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[]) Writes trace information, a formatted array of objects and event information to the listener specific output. Declaration public override void TraceEvent(TraceEventCache context, string source, TraceEventType type, int id, string template, params object[] args) Parameters Type Name Description System.Diagnostics.TraceEventCache context A System.Diagnostics.TraceEventCache object that contains the current process ID, thread ID, and stack trace information. System.String source A name used to identify the output, typically the name of the application that generated the trace event. System.Diagnostics.TraceEventType type One of the System.Diagnostics.TraceEventType values specifying the type of event that has caused the trace. System.Int32 id A numeric identifier for the event. System.String template A format string that contains zero or more format items, which correspond to objects in the args array. System.Object [] args An langword_csharp_object array containing zero or more objects to format. TraceTransfer(TraceEventCache, String, Int32, String, Guid) Writes trace information, a message, a related activity identity and event information to the listener specific output. Declaration public override void TraceTransfer(TraceEventCache context, string source, int id, string message, Guid relatedActivityId) Parameters Type Name Description System.Diagnostics.TraceEventCache context A System.Diagnostics.TraceEventCache object that contains the current process ID, thread ID, and stack trace information. System.String source A name used to identify the output, typically the name of the application that generated the trace event. System.Int32 id A numeric identifier for the event. System.String message A message to write. System.Guid relatedActivityId A System.Guid object identifying a related activity. Write(String) Writes the value of the object's System.Object.ToString method to the listener you create when you implement the System.Diagnostics.TraceListener class. Declaration public override void Write(string message) Parameters Type Name Description System.String message An System.Object whose fully qualified class name you want to write. WriteLine(String) Writes the value of the object's System.Object.ToString method to the listener you create when you implement the System.Diagnostics.TraceListener class, followed by a line terminator. Declaration public override void WriteLine(string message) Parameters Type Name Description System.String message An System.Object whose fully qualified class name you want to write."
  },
  "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.html": {
    "href": "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.html",
    "title": "Namespace Subatomix.Logging.Sql",
    "keywords": "Namespace Subatomix.Logging.Sql Classes SqlLogger A logger that writes messages to Azure SQL Database, SQL Server, or a compatible database product. SqlLoggerOptions Options for SqlLoggerProvider and SqlLogger . SqlLoggerProvider A provider of SqlLogger instances."
  },
  "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.SqlLogger.html": {
    "href": "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.SqlLogger.html",
    "title": "Class SqlLogger",
    "keywords": "Class SqlLogger A logger that writes messages to Azure SQL Database, SQL Server, or a compatible database product. Inheritance System.Object SqlLogger Implements Microsoft.Extensions.Logging.ILogger Namespace : Subatomix.Logging.Sql Assembly : Subatomix.Logging.Sql.dll Syntax public class SqlLogger : Object Properties Name Gets the category name. Declaration public string Name { get; } Property Value Type Description System.String Methods BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state The identifier for the scope. Returns Type Description System.IDisposable An System.IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Level to be checked. Returns Type Description System.Boolean true if enabled. Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Writes a log entry. Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Entry will be written on this level. Microsoft.Extensions.Logging.EventId eventId Id of the event. TState state The entry to be written. Can be also an object. System.Exception exception The exception related to this entry. System.Func <TState, System.Exception , System.String > formatter Function to create a System.String message of the state and exception . Type Parameters Name Description TState The type of the object to be written. Implements Microsoft.Extensions.Logging.ILogger"
  },
  "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.SqlLoggerOptions.html": {
    "href": "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.SqlLoggerOptions.html",
    "title": "Class SqlLoggerOptions",
    "keywords": "Class SqlLoggerOptions Options for SqlLoggerProvider and SqlLogger . Inheritance System.Object SqlLoggerOptions Namespace : Subatomix.Logging.Sql Assembly : Subatomix.Logging.Sql.dll Syntax public class SqlLoggerOptions : Object Constructors SqlLoggerOptions() Declaration public SqlLoggerOptions() Properties AutoflushWait Gets or sets the duration to wait before the next flush of log entries to the database after a successful flush. The default is 5 seconds. Declaration public TimeSpan AutoflushWait { get; set; } Property Value Type Description System.TimeSpan BatchSize Gets or sets the maximum count of log entries to flush to the database in a single batch. The default is 10,000 entries. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 Remarks If the count of pending log entries is greater than the batch size, the provider will flush in multiple batches. BatchTimeout Gets or sets the maximum duration in which to flush a single batch of entries to the database. The default is 30 seconds. Declaration public TimeSpan BatchTimeout { get; set; } Property Value Type Description System.TimeSpan Remarks If a flush operation times out, the provider abandons the failed operation and schedules a retry. NOTE: In the event of a timeout, SqlClient sends a signal to the database server to cancel the executing command. In the rare case that the server does not receive the signal, it is possible that the command will continue to execute on the server. ConnectionString Gets or sets the database connection string. The default is null . Declaration public string ConnectionString { get; set; } Property Value Type Description System.String LogName Gets or sets the name of the log stream. The default is the name of the current operating system process. Declaration public string LogName { get; set; } Property Value Type Description System.String Remarks The log stream name is an application-defined arbitrary value used to differentiate the application's log entries from those of other applications written to the same database. MaxQueueSize Gets or sets the maximum count of log entries that can be pending to be flushed to the database. The default is 10,000,000 entries. Declaration public int MaxQueueSize { get; set; } Property Value Type Description System.Int32 Remarks If a new log entry would cause the count of pending entries to exceed the maximum queue size, the provider drops the oldest log entry so that the count never exceeds this limit. RetryWaitIncrement Gets or sets the increment to add, after each consecutive failure, to the duration to wait before retrying to flush log entries to the database. The default is 30 seconds. Declaration public TimeSpan RetryWaitIncrement { get; set; } Property Value Type Description System.TimeSpan RetryWaitMax Gets or sets the maximum duration to wait after a failure before retrying to flush log entries to the database. The default is 1 hour. Declaration public TimeSpan RetryWaitMax { get; set; } Property Value Type Description System.TimeSpan ShutdownWait Gets or sets the maximum duration to wait for log entries to flush to the database during disposal. The default is 1 minute. Declaration public TimeSpan ShutdownWait { get; set; } Property Value Type Description System.TimeSpan"
  },
  "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.SqlLoggerProvider.html": {
    "href": "api/Subatomix.Logging.Sql/Subatomix.Logging.Sql.SqlLoggerProvider.html",
    "title": "Class SqlLoggerProvider",
    "keywords": "Class SqlLoggerProvider A provider of SqlLogger instances. Inheritance System.Object SqlLoggerProvider Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Namespace : Subatomix.Logging.Sql Assembly : Subatomix.Logging.Sql.dll Syntax public class SqlLoggerProvider : Object Constructors SqlLoggerProvider(IOptionsMonitor<SqlLoggerOptions>) Initializes a new SqlLoggerProvider instance with the the specified options. Declaration public SqlLoggerProvider(IOptionsMonitor<SqlLoggerOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptionsMonitor < SqlLoggerOptions > options The options for the provider. Exceptions Type Condition System.ArgumentNullException options is null . Properties Logger Gets or sets the logger to use for diagnostic messages from the logger provider itself. Declaration public ILogger Logger { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger Options Gets the most recently set options. Declaration public SqlLoggerOptions Options { get; } Property Value Type Description SqlLoggerOptions Methods CreateLogger(String) Creates a new Microsoft.Extensions.Logging.ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description System.String categoryName The category name for messages produced by the logger. Returns Type Description Microsoft.Extensions.Logging.ILogger The instance of Microsoft.Extensions.Logging.ILogger that was created. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(Boolean) Disposes resources owned by the object. Declaration protected virtual void Dispose(bool managed) Parameters Type Name Description System.Boolean managed Whether to dispose managed resources (in addition to unmanaged resources, which are always disposed). Flush() Flushes buffered entries to the database. Declaration public void Flush() Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable"
  },
  "api/Subatomix.Logging/Subatomix.Logging.ActivityScope.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.ActivityScope.html",
    "title": "Class ActivityScope",
    "keywords": "Class ActivityScope A scope representing a logical operation with an associated System.Diagnostics.Activity . This type is intended for use with the Microsoft.Extensions.Logging.ILogger API. Inheritance System.Object OperationScope ActivityScope Implements IConsoleFormattable System.IDisposable Inherited Members OperationScope.IConsoleFormattable.Write(TextWriter, ConsoleContext) OperationScope.Logger OperationScope.LogLevel OperationScope.Name OperationScope.IsCompleted OperationScope.Duration OperationScope.Exception OperationScope.ExceptionLogLevel Namespace : Subatomix.Logging Assembly : Subatomix.Logging.dll Syntax public class ActivityScope : OperationScope, IConsoleFormattable Remarks On construction, a scope of this type starts a new named System.Diagnostics.Activity and logs a start message containing the name of the activity. On disposal, the scope stops the activity and logs a completion message containing the name and duration of the activity. Code using this type can arrange for exception reporting by setting the System.Exception propery, typically in a langword_csharp_catch block. On disposal, if a scope's System.Exception propery is not null , the scope logs the exception immediately before the completion message and adds an exception indicator to the completion message. The scope also sets the activity's status if it is unset: if System.Exception is null , the scope sets System.Diagnostics.Activity.Status to System.Diagnostics.ActivityStatusCode.Ok and System.Diagnostics.Activity.StatusDescription to null ; othwerise, the scope sets System.Diagnostics.Activity.Status to System.Diagnostics.ActivityStatusCode.Error and System.Diagnostics.Activity.StatusDescription to the exception message. Constructors ActivityScope(ILogger, LogLevel, String) Initializes and starts a new ActivityScope instance. Declaration public ActivityScope(ILogger logger, LogLevel logLevel, string name = null) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. Microsoft.Extensions.Logging.LogLevel logLevel The severity level for operation start and completion messages. System.String name The name of the operation. If omitted, the default is the name of the calling member. ActivityScope(ILogger, LogLevel, String, Boolean) Initializes a new ActivityScope instance. Declaration protected ActivityScope(ILogger logger, LogLevel logLevel, string name, bool start) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. Microsoft.Extensions.Logging.LogLevel logLevel The severity level for operation start and completion messages. System.String name The name of the operation. System.Boolean start Whether to invoke Start() . A constructor of a derived type can pass false to permit further initialization before the logical operation starts. The derived type constructor must then invoke Start() before returning. Exceptions Type Condition System.ArgumentNullException logger and/or name is null . System.ArgumentException name is empty. Properties Activity Gets the activity object associated with the operation. Declaration public Activity Activity { get; } Property Value Type Description System.Diagnostics.Activity Methods Start() Starts the logical operation. Declaration protected override void Start() Overrides OperationScope.Start() Stop() Stops the logical operation and disposes managed resources owned by the scope. Declaration protected override void Stop() Overrides OperationScope.Stop() Implements IConsoleFormattable System.IDisposable"
  },
  "api/Subatomix.Logging/Subatomix.Logging.ActivityScopeInitiator.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.ActivityScopeInitiator.html",
    "title": "Class ActivityScopeInitiator",
    "keywords": "Class ActivityScopeInitiator Begins or performs operations in an ActivityScope with a specific Microsoft.Extensions.Logging.ILogger , Microsoft.Extensions.Logging.LogLevel , and operation name. Inheritance System.Object ActivityScopeInitiator Implements IFluent Namespace : Subatomix.Logging Assembly : Subatomix.Logging.dll Syntax public sealed class ActivityScopeInitiator : ValueType, IFluent Remarks This type is part of a fluent API. Obtain instances of this type via Activity(ILogger, String) or Activity(ILogger, LogLevel, String) . Methods Begin() Begins a new ActivityScope . Declaration public ActivityScope Begin() Returns Type Description ActivityScope A new ActivityScope . The caller is responsible for disposing the scope. Exceptions Type Condition System.ArgumentNullException Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do(Action) Performs the specified operation in an ActivityScope , capturing any exception. Declaration public void Do(Action action) Parameters Type Name Description System.Action action The operation to perform. Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do<T>(T, Action<T>) Performs the specified operation in an ActivityScope , capturing any exception. Declaration public void Do<T>(T arg, Action<T> action) Parameters Type Name Description T arg An argument to pass to action . System.Action <T> action The operation to perform. Type Parameters Name Description T The type of arg . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do<TResult>(Func<TResult>) Performs the specified operation in an ActivityScope , capturing any exception. Declaration public TResult Do<TResult>(Func<TResult> action) Parameters Type Name Description System.Func <TResult> action The operation to perform. Returns Type Description TResult The result of action . Type Parameters Name Description TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do<T, TResult>(T, Func<T, TResult>) Performs the specified operation in an ActivityScope , capturing any exception. Declaration public TResult Do<T, TResult>(T arg, Func<T, TResult> action) Parameters Type Name Description T arg An argument to pass to action . System.Func <T, TResult> action The operation to perform. Returns Type Description TResult The result of action . Type Parameters Name Description T The type of arg . TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync(Func<Task>) Performs the specified asynchronous operation in an ActivityScope , capturing any exception. Declaration public Task DoAsync(Func<Task> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action The operation to perform. Returns Type Description System.Threading.Tasks.Task A task representing the asynchronous operation. Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync<T>(T, Func<T, Task>) Performs the specified asynchronous operation in an ActivityScope , capturing any exception. Declaration public Task DoAsync<T>(T arg, Func<T, Task> action) Parameters Type Name Description T arg An argument to pass to action . System.Func <T, System.Threading.Tasks.Task > action The operation to perform. Returns Type Description System.Threading.Tasks.Task A task representing the asynchronous operation. Type Parameters Name Description T The type of arg . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync<TResult>(Func<Task<TResult>>) Performs the specified asynchronous operation in an ActivityScope , capturing any exception. Declaration public Task<TResult> DoAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> action The operation to perform. Returns Type Description System.Threading.Tasks.Task <TResult> A task representing the asynchronous operation. When the task completes, its System.Threading.Tasks.Task`1.Result property is set to the result of action . Type Parameters Name Description TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync<T, TResult>(T, Func<T, Task<TResult>>) Performs the specified asynchronous operation in an ActivityScope , capturing any exception. Declaration public Task<TResult> DoAsync<T, TResult>(T arg, Func<T, Task<TResult>> action) Parameters Type Name Description T arg An argument to pass to action . System.Func <T, System.Threading.Tasks.Task <TResult>> action The operation to perform. Returns Type Description System.Threading.Tasks.Task <TResult> A task representing the asynchronous operation. When the task completes, its System.Threading.Tasks.Task`1.Result property is set to the result of action . Type Parameters Name Description T The type of arg . TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Explicit Interface Implementations IFluent.GetType() Gets the System.Type of the current instance. Declaration Type IFluent.GetType() Returns Type Description System.Type The exact runtime type of the current instance. Implements IFluent"
  },
  "api/Subatomix.Logging/Subatomix.Logging.Console.ConsoleContext.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Console.ConsoleContext.html",
    "title": "Class ConsoleContext",
    "keywords": "Class ConsoleContext Contextual information provided when formatting for console output. Inheritance System.Object ConsoleContext Namespace : Subatomix.Logging.Console Assembly : Subatomix.Logging.dll Syntax public sealed class ConsoleContext : ValueType Constructors ConsoleContext(String) Initializes a new ConsoleContext instance with the specified ANSI escape code sequence for default color and style. Declaration public ConsoleContext(string defaultCode) Parameters Type Name Description System.String defaultCode An ANSI escape code sequence that resets the current color and style to the default for the context, or null to disable colorization and styling. Properties DefaultCode Gets an ANSI escape code sequence that resets the current color and style to the default for the context. Declaration public string DefaultCode { get; } Property Value Type Description System.String IsColorEnabled Gets whether to use ANSI escape code sequences to control the color and style of output. Declaration public bool IsColorEnabled { get; } Property Value Type Description System.Boolean"
  },
  "api/Subatomix.Logging/Subatomix.Logging.Console.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Console.html",
    "title": "Namespace Subatomix.Logging.Console",
    "keywords": "Namespace Subatomix.Logging.Console Classes ConsoleContext Contextual information provided when formatting for console output. PrettyConsoleFormatter A prettier formatter than Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter . PrettyConsoleFormatterOptions Options for PrettyConsoleFormatter . PrettyConsoleLoggingBuilderExtensions Extensions methods to add PrettyConsoleFormatter . Interfaces IConsoleFormattable Exposes an object's ability to format itself for console output."
  },
  "api/Subatomix.Logging/Subatomix.Logging.Console.IConsoleFormattable.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Console.IConsoleFormattable.html",
    "title": "Interface IConsoleFormattable",
    "keywords": "Interface IConsoleFormattable Exposes an object's ability to format itself for console output. Namespace : Subatomix.Logging.Console Assembly : Subatomix.Logging.dll Syntax public interface IConsoleFormattable Methods Write(TextWriter, ConsoleContext) Formats the object for console output. Declaration bool Write(TextWriter writer, ConsoleContext console) Parameters Type Name Description System.IO.TextWriter writer The writer to which to write the formatted output. ConsoleContext console Contextual information, including whether to use ANSI escape code sequences to control the color and style of output. Returns Type Description System.Boolean true if one or more characters were written; false otherwise."
  },
  "api/Subatomix.Logging/Subatomix.Logging.Console.PrettyConsoleFormatter.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Console.PrettyConsoleFormatter.html",
    "title": "Class PrettyConsoleFormatter",
    "keywords": "Class PrettyConsoleFormatter A prettier formatter than Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter . Inheritance System.Object PrettyConsoleFormatter Implements System.IDisposable Namespace : Subatomix.Logging.Console Assembly : Subatomix.Logging.dll Syntax public sealed class PrettyConsoleFormatter : ConsoleFormatter Remarks Configure this formatter via PrettyConsoleFormatterOptions . Note that this formatter ignores the Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.IncludeScopes and Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.TimestampFormat properties. Constructors PrettyConsoleFormatter(IOptionsMonitor<PrettyConsoleFormatterOptions>) Initializes a new PrettyConsoleFormatter instance. Declaration public PrettyConsoleFormatter(IOptionsMonitor<PrettyConsoleFormatterOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptionsMonitor < PrettyConsoleFormatterOptions > options An accessor that provides the current options for the formatter and notifies when those options change. Exceptions Type Condition System.ArgumentNullException options is null . Fields Name The name associated with PrettyConsoleFormatter . Declaration public const string Name = \"pretty\" Field Value Type Description System.String Properties IsColorEnabled Gets whether color output is enabled. Declaration public bool IsColorEnabled { get; } Property Value Type Description System.Boolean Options Gets the most recently set options. Declaration public PrettyConsoleFormatterOptions Options { get; } Property Value Type Description PrettyConsoleFormatterOptions Methods Write<TState>(in LogEntry<TState>, IExternalScopeProvider, TextWriter) Writes the log message to the specified TextWriter. Declaration public override void Write<TState>(in LogEntry<TState> entry, IExternalScopeProvider scopes, TextWriter writer) Parameters Type Name Description Microsoft.Extensions.Logging.Abstractions.LogEntry <TState> entry The log entry. Microsoft.Extensions.Logging.IExternalScopeProvider scopes The provider of scope data. System.IO.TextWriter writer The string writer embedding ansi code for colors. Type Parameters Name Description TState The type of the object to be written. Remarks if the formatter wants to write colors to the console, it can do so by embedding ANSI color codes into the string Implements System.IDisposable"
  },
  "api/Subatomix.Logging/Subatomix.Logging.Console.PrettyConsoleFormatterOptions.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Console.PrettyConsoleFormatterOptions.html",
    "title": "Class PrettyConsoleFormatterOptions",
    "keywords": "Class PrettyConsoleFormatterOptions Options for PrettyConsoleFormatter . Inheritance System.Object PrettyConsoleFormatterOptions Namespace : Subatomix.Logging.Console Assembly : Subatomix.Logging.dll Syntax public class PrettyConsoleFormatterOptions : ConsoleFormatterOptions Constructors PrettyConsoleFormatterOptions() Declaration public PrettyConsoleFormatterOptions() Properties ColorBehavior Gets or sets whether to use color in log messages. Declaration public LoggerColorBehavior ColorBehavior { get; set; } Property Value Type Description Microsoft.Extensions.Logging.Console.LoggerColorBehavior"
  },
  "api/Subatomix.Logging/Subatomix.Logging.Console.PrettyConsoleLoggingBuilderExtensions.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Console.PrettyConsoleLoggingBuilderExtensions.html",
    "title": "Class PrettyConsoleLoggingBuilderExtensions",
    "keywords": "Class PrettyConsoleLoggingBuilderExtensions Extensions methods to add PrettyConsoleFormatter . Inheritance System.Object PrettyConsoleLoggingBuilderExtensions Namespace : Subatomix.Logging.Console Assembly : Subatomix.Logging.dll Syntax public static class PrettyConsoleLoggingBuilderExtensions : Object Methods AddPrettyConsole(ILoggingBuilder) Adds a console logger using a log formatter named 'pretty' to the factory with default options. Declaration public static ILoggingBuilder AddPrettyConsole(this ILoggingBuilder builder) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggingBuilder builder The logging builder to use. Returns Type Description Microsoft.Extensions.Logging.ILoggingBuilder Exceptions Type Condition System.ArgumentNullException builder is null . AddPrettyConsole(ILoggingBuilder, Action<PrettyConsoleFormatterOptions>) Adds a console logger using a log formatter named 'pretty' to the factory with the specified options. Declaration public static ILoggingBuilder AddPrettyConsole(this ILoggingBuilder builder, Action<PrettyConsoleFormatterOptions> configure) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggingBuilder builder The logging builder to use. System.Action < PrettyConsoleFormatterOptions > configure A delegate to configure options for the log formatter. Returns Type Description Microsoft.Extensions.Logging.ILoggingBuilder Exceptions Type Condition System.ArgumentNullException builder and/or configure is null . AddPrettyConsoleFormatter(ILoggingBuilder) Adds a console log formatter named 'pretty' to the factory with default options. Declaration public static ILoggingBuilder AddPrettyConsoleFormatter(this ILoggingBuilder builder) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggingBuilder builder The logging builder to use. Returns Type Description Microsoft.Extensions.Logging.ILoggingBuilder Remarks NOTE: This method adds the the formatter only. To add the formatter and a console logger using it, use AddPrettyConsole(ILoggingBuilder) . Exceptions Type Condition System.ArgumentNullException builder is null . AddPrettyConsoleFormatter(ILoggingBuilder, Action<PrettyConsoleFormatterOptions>) Adds a console log formatter named 'pretty' to the factory with the specified options. Declaration public static ILoggingBuilder AddPrettyConsoleFormatter(this ILoggingBuilder builder, Action<PrettyConsoleFormatterOptions> configure) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggingBuilder builder The logging builder to use. System.Action < PrettyConsoleFormatterOptions > configure A delegate to configure options for the log formatter. Returns Type Description Microsoft.Extensions.Logging.ILoggingBuilder Remarks NOTE: This method adds the the formatter only. To add the formatter and a console logger using it, use AddPrettyConsole(ILoggingBuilder, Action<PrettyConsoleFormatterOptions>) . Exceptions Type Condition System.ArgumentNullException builder and/or configure is null ."
  },
  "api/Subatomix.Logging/Subatomix.Logging.Debugger.DebuggerLogger.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Debugger.DebuggerLogger.html",
    "title": "Class DebuggerLogger",
    "keywords": "Class DebuggerLogger A logger that sends messages to an attached debugger. In Visual Studio, logged messages will appear in the debug output window. Inheritance System.Object DebuggerLogger Implements Microsoft.Extensions.Logging.ILogger Namespace : Subatomix.Logging.Debugger Assembly : Subatomix.Logging.dll Syntax public class DebuggerLogger : Object Properties Name Gets the category name. Declaration public string Name { get; } Property Value Type Description System.String Provider Gets the associated provider. Declaration public DebuggerLoggerProvider Provider { get; } Property Value Type Description DebuggerLoggerProvider Methods BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state The identifier for the scope. Returns Type Description System.IDisposable An System.IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Level to be checked. Returns Type Description System.Boolean true if enabled. Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Writes a log entry. Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Entry will be written on this level. Microsoft.Extensions.Logging.EventId eventId Id of the event. TState state The entry to be written. Can be also an object. System.Exception exception The exception related to this entry. System.Func <TState, System.Exception , System.String > formatter Function to create a System.String message of the state and exception . Type Parameters Name Description TState The type of the object to be written. Implements Microsoft.Extensions.Logging.ILogger"
  },
  "api/Subatomix.Logging/Subatomix.Logging.Debugger.DebuggerLoggerProvider.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Debugger.DebuggerLoggerProvider.html",
    "title": "Class DebuggerLoggerProvider",
    "keywords": "Class DebuggerLoggerProvider A provider of DebuggerLogger instances. Inheritance System.Object DebuggerLoggerProvider Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Microsoft.Extensions.Logging.ISupportExternalScope Namespace : Subatomix.Logging.Debugger Assembly : Subatomix.Logging.dll Syntax public class DebuggerLoggerProvider : Object Constructors DebuggerLoggerProvider() Declaration public DebuggerLoggerProvider() Properties ScopeProvider Gets the external scope provider, if any. Defaults to null . Declaration public IExternalScopeProvider ScopeProvider { get; } Property Value Type Description Microsoft.Extensions.Logging.IExternalScopeProvider Methods CreateLogger(String) Creates a new Microsoft.Extensions.Logging.ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description System.String categoryName The category name for messages produced by the logger. Returns Type Description Microsoft.Extensions.Logging.ILogger The instance of Microsoft.Extensions.Logging.ILogger that was created. SetScopeProvider(IExternalScopeProvider) Sets external scope information source for logger provider. Declaration public void SetScopeProvider(IExternalScopeProvider scopeProvider) Parameters Type Name Description Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider The provider of scope data. Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Microsoft.Extensions.Logging.ISupportExternalScope"
  },
  "api/Subatomix.Logging/Subatomix.Logging.Debugger.DebuggerLoggingBuilderExtensions.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Debugger.DebuggerLoggingBuilderExtensions.html",
    "title": "Class DebuggerLoggingBuilderExtensions",
    "keywords": "Class DebuggerLoggingBuilderExtensions Extensions methods to add DebuggerLoggerProvider . Inheritance System.Object DebuggerLoggingBuilderExtensions Namespace : Subatomix.Logging.Debugger Assembly : Subatomix.Logging.dll Syntax public static class DebuggerLoggingBuilderExtensions : Object Methods AddDebugger(ILoggingBuilder) Adds a debugger logger to the factory. The logger sends messages to an attached debugger. In Visual Studio, logged messages will appear in the debug output window. Declaration public static ILoggingBuilder AddDebugger(this ILoggingBuilder builder) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggingBuilder builder The logging builder to use. Returns Type Description Microsoft.Extensions.Logging.ILoggingBuilder Exceptions Type Condition System.ArgumentNullException builder is null ."
  },
  "api/Subatomix.Logging/Subatomix.Logging.Debugger.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.Debugger.html",
    "title": "Namespace Subatomix.Logging.Debugger",
    "keywords": "Namespace Subatomix.Logging.Debugger Classes DebuggerLogger A logger that sends messages to an attached debugger. In Visual Studio, logged messages will appear in the debug output window. DebuggerLoggerProvider A provider of DebuggerLogger instances. DebuggerLoggingBuilderExtensions Extensions methods to add DebuggerLoggerProvider ."
  },
  "api/Subatomix.Logging/Subatomix.Logging.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.html",
    "title": "Namespace Subatomix.Logging",
    "keywords": "Namespace Subatomix.Logging Classes ActivityScope A scope representing a logical operation with an associated System.Diagnostics.Activity . This type is intended for use with the Microsoft.Extensions.Logging.ILogger API. ActivityScopeInitiator Begins or performs operations in an ActivityScope with a specific Microsoft.Extensions.Logging.ILogger , Microsoft.Extensions.Logging.LogLevel , and operation name. LoggerExtensions Extension methods for Microsoft.Extensions.Logging.ILogger . OperationScope A scope representing a logical operation. This type is intended for use with the Microsoft.Extensions.Logging.ILogger API. OperationScopeInitiator Begins or performs operations in an OperationScope with a specific Microsoft.Extensions.Logging.ILogger , Microsoft.Extensions.Logging.LogLevel , and operation name. Interfaces IFluent Interface for fluent APIs. Prevents methods inherited from System.Object from appearing in IntelliSense."
  },
  "api/Subatomix.Logging/Subatomix.Logging.IFluent.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.IFluent.html",
    "title": "Interface IFluent",
    "keywords": "Interface IFluent Interface for fluent APIs. Prevents methods inherited from System.Object from appearing in IntelliSense. Namespace : Subatomix.Logging Assembly : Subatomix.Logging.dll Syntax public interface IFluent Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false . GetHashCode() Serves as the default hash function. Declaration int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. GetType() Gets the System.Type of the current instance. Declaration Type GetType() Returns Type Description System.Type The exact runtime type of the current instance. ToString() Returns a string that represents the current object. Declaration string ToString() Returns Type Description System.String A string that represents the current object."
  },
  "api/Subatomix.Logging/Subatomix.Logging.LoggerExtensions.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions",
    "keywords": "Class LoggerExtensions Extension methods for Microsoft.Extensions.Logging.ILogger . Inheritance System.Object LoggerExtensions Namespace : Subatomix.Logging Assembly : Subatomix.Logging.dll Syntax public static class LoggerExtensions : Object Methods Activity(ILogger, LogLevel, String) Prepares to create a logical operation scope that automatically logs start, completion, and (optional) exception messages and automatically starts and stops a named System.Diagnostics.Activity . Declaration public static ActivityScopeInitiator Activity(this ILogger logger, LogLevel logLevel, string name = null) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. Microsoft.Extensions.Logging.LogLevel logLevel The severity level for operation start and completion messages. System.String name The name of the operation. If omitted, the default is the name of the calling member. Returns Type Description ActivityScopeInitiator An object that exposes methods to begin or to perform an operation in an ActivityScope with the specified logger , logLevel , and name . Activity(ILogger, String) Prepares to create a logical operation scope that automatically logs start, completion, and (optional) exception messages and automatically starts and stops a named System.Diagnostics.Activity . Declaration public static ActivityScopeInitiator Activity(this ILogger logger, string name = null) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. System.String name The name of the operation. If omitted, the default is the name of the calling member. Returns Type Description ActivityScopeInitiator An object that exposes methods to begin or to perform an operation in an ActivityScope with the specified logger and name . Remarks This overload uses the Microsoft.Extensions.Logging.LogLevel.Information severity level for start and completion messages. Log(ILogger, LogLevel, Exception) Logs the specified exception. Declaration public static void Log(this ILogger logger, LogLevel level, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. Microsoft.Extensions.Logging.LogLevel level The severity level of the exception System.Exception exception The exception to log. LogCritical(ILogger, Exception) Logs the specified exception at Microsoft.Extensions.Logging.LogLevel.Critical (fatal) level. Declaration public static void LogCritical(this ILogger logger, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. System.Exception exception The exception to log. Remarks This method is a more concise synonym for Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[]) . LogDebug(ILogger, Exception) Logs the specified exception at Microsoft.Extensions.Logging.LogLevel.Debug (verbose) level. Declaration public static void LogDebug(this ILogger logger, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. System.Exception exception The exception to log. Remarks This method is a more concise synonym for Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[]) . LogError(ILogger, Exception) Logs the specified exception at Microsoft.Extensions.Logging.LogLevel.Error level. Declaration public static void LogError(this ILogger logger, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. System.Exception exception The exception to log. Remarks This method is a more concise synonym for Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[]) . LogInformation(ILogger, Exception) Logs the specified exception at Microsoft.Extensions.Logging.LogLevel.Information level. Declaration public static void LogInformation(this ILogger logger, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. System.Exception exception The exception to log. Remarks This method is a more concise synonym for Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[]) . LogTrace(ILogger, Exception) Logs the specified exception at Microsoft.Extensions.Logging.LogLevel.Trace (very verbose) level. Declaration public static void LogTrace(this ILogger logger, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. System.Exception exception The exception to log. Remarks This method is a more concise synonym for Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[]) . LogWarning(ILogger, Exception) Logs the specified exception at Microsoft.Extensions.Logging.LogLevel.Warning level. Declaration public static void LogWarning(this ILogger logger, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to use. System.Exception exception The exception to log. Remarks This method is a more concise synonym for Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[]) . Operation(ILogger, LogLevel, String) Prepares to create a logical operation scope that automatically logs start, completion, and (optional) exception messages. Declaration public static OperationScopeInitiator Operation(this ILogger logger, LogLevel logLevel, string name = null) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. Microsoft.Extensions.Logging.LogLevel logLevel The severity level for operation start and completion messages. System.String name The name of the operation. If omitted, the default is the name of the calling member. Returns Type Description OperationScopeInitiator An object that exposes methods to begin or to perform an operation in an OperationScope with the specified logger , logLevel , and name . Operation(ILogger, String) Prepares to create a logical operation scope that automatically logs start, completion, and (optional) exception messages. Declaration public static OperationScopeInitiator Operation(this ILogger logger, string name = null) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. System.String name The name of the operation. If omitted, the default is the name of the calling member. Returns Type Description OperationScopeInitiator An object that exposes methods to begin or to perform an operation in an OperationScope with the specified logger and name . Remarks This overload uses the Microsoft.Extensions.Logging.LogLevel.Information severity level for start and completion messages."
  },
  "api/Subatomix.Logging/Subatomix.Logging.OperationScope.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.OperationScope.html",
    "title": "Class OperationScope",
    "keywords": "Class OperationScope A scope representing a logical operation. This type is intended for use with the Microsoft.Extensions.Logging.ILogger API. Inheritance System.Object OperationScope ActivityScope Implements IConsoleFormattable System.IDisposable Namespace : Subatomix.Logging Assembly : Subatomix.Logging.dll Syntax public class OperationScope : Object, IConsoleFormattable Remarks On construction, a scope of this type logs a start message containing the name of the operation. On disposal, a scope logs a completion message containing the name and duration of the operation. Code using this type can arrange for exception logging by setting the Exception propery, typically in a langword_csharp_catch block. On disposal, if a scope's Exception propery is not null , the scope logs the exception immediately before the completion message and adds an exception indicator to the completion message. Constructors OperationScope(ILogger, LogLevel, String) Initializes and starts a new OperationScope instance. Declaration public OperationScope(ILogger logger, LogLevel logLevel, string name = null) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. Microsoft.Extensions.Logging.LogLevel logLevel The severity level for operation start and completion messages. System.String name The name of the operation. If omitted, the default is the name of the calling member. OperationScope(ILogger, LogLevel, String, Boolean) Initializes a new OperationScope instance. Declaration protected OperationScope(ILogger logger, LogLevel logLevel, string name, bool start) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger for operation-related messages. Microsoft.Extensions.Logging.LogLevel logLevel The severity level for operation start and completion messages. System.String name The name of the operation. System.Boolean start Whether to invoke Start() . A constructor of a derived type can pass false to permit further initialization before the logical operation starts. The derived type constructor must then invoke Start() before returning. Exceptions Type Condition System.ArgumentNullException logger and/or name is null . System.ArgumentException name is empty. Properties Duration Gets the duration of the operation. Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan Remarks The value of this property steadily increases until the operation is disposed. After disposal, the value remains constant. Exception Gets or sets the exception associated with the operation, or null if no exception is associated with the operation. The default is null . Declaration public Exception Exception { get; set; } Property Value Type Description System.Exception Remarks On disposal, if this property is not null , the scope logs the exception immediately before the completion message and adds an exception indicator to the completion message. ExceptionLogLevel Gets or sets the severity level used to report the exception, if any, associated with the operation. The default is Microsoft.Extensions.Logging.LogLevel.Error . Declaration public LogLevel ExceptionLogLevel { get; set; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel IsCompleted Gets whether the operation has completed. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean Remarks The value of this property is false until the operation is disposed. On disposal, the value transitions to true . Logger Gets the logger for operation-related messages. Declaration protected ILogger Logger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger LogLevel Gets the severity level for operation start and completion messages. Declaration protected LogLevel LogLevel { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel Remarks Use the ExceptionLogLevel to set the severity level used to report the exception, if any, associated with the operation. Name Gets the name of the operation. Declaration public string Name { get; } Property Value Type Description System.String Methods Start() Starts the logical operation. Declaration protected virtual void Start() Stop() Stops the logical operation and disposes managed resources owned by the scope. Declaration protected virtual void Stop() Explicit Interface Implementations IConsoleFormattable.Write(TextWriter, ConsoleContext) Formats the object for console output. Declaration bool IConsoleFormattable.Write(TextWriter writer, ConsoleContext console) Parameters Type Name Description System.IO.TextWriter writer The writer to which to write the formatted output. ConsoleContext console Contextual information, including whether to use ANSI escape code sequences to control the color and style of output. Returns Type Description System.Boolean true if one or more characters were written; false otherwise. Implements IConsoleFormattable System.IDisposable"
  },
  "api/Subatomix.Logging/Subatomix.Logging.OperationScopeInitiator.html": {
    "href": "api/Subatomix.Logging/Subatomix.Logging.OperationScopeInitiator.html",
    "title": "Class OperationScopeInitiator",
    "keywords": "Class OperationScopeInitiator Begins or performs operations in an OperationScope with a specific Microsoft.Extensions.Logging.ILogger , Microsoft.Extensions.Logging.LogLevel , and operation name. Inheritance System.Object OperationScopeInitiator Implements IFluent Namespace : Subatomix.Logging Assembly : Subatomix.Logging.dll Syntax public sealed class OperationScopeInitiator : ValueType, IFluent Remarks This type is part of a fluent API. Obtain instances of this type via Operation(ILogger, String) or Operation(ILogger, LogLevel, String) . Methods Begin() Begins a new OperationScope . Declaration public OperationScope Begin() Returns Type Description OperationScope A new OperationScope . The caller is responsible for disposing the scope. Exceptions Type Condition System.ArgumentNullException Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do(Action) Performs the specified operation in an OperationScope , capturing any exception. Declaration public void Do(Action action) Parameters Type Name Description System.Action action The operation to perform. Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do<T>(T, Action<T>) Performs the specified operation in an OperationScope , capturing any exception. Declaration public void Do<T>(T arg, Action<T> action) Parameters Type Name Description T arg An argument to pass to action . System.Action <T> action The operation to perform. Type Parameters Name Description T The type of arg . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do<TResult>(Func<TResult>) Performs the specified operation in an OperationScope , capturing any exception. Declaration public TResult Do<TResult>(Func<TResult> action) Parameters Type Name Description System.Func <TResult> action The operation to perform. Returns Type Description TResult The result of action . Type Parameters Name Description TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Do<T, TResult>(T, Func<T, TResult>) Performs the specified operation in an OperationScope , capturing any exception. Declaration public TResult Do<T, TResult>(T arg, Func<T, TResult> action) Parameters Type Name Description T arg An argument to pass to action . System.Func <T, TResult> action The operation to perform. Returns Type Description TResult The result of action . Type Parameters Name Description T The type of arg . TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync(Func<Task>) Performs the specified asynchronous operation in an OperationScope , capturing any exception. Declaration public Task DoAsync(Func<Task> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action The operation to perform. Returns Type Description System.Threading.Tasks.Task A task representing the asynchronous operation. Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync<T>(T, Func<T, Task>) Performs the specified asynchronous operation in an OperationScope , capturing any exception. Declaration public Task DoAsync<T>(T arg, Func<T, Task> action) Parameters Type Name Description T arg An argument to pass to action . System.Func <T, System.Threading.Tasks.Task > action The operation to perform. Returns Type Description System.Threading.Tasks.Task A task representing the asynchronous operation. Type Parameters Name Description T The type of arg . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync<TResult>(Func<Task<TResult>>) Performs the specified asynchronous operation in an OperationScope , capturing any exception. Declaration public Task<TResult> DoAsync<TResult>(Func<Task<TResult>> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> action The operation to perform. Returns Type Description System.Threading.Tasks.Task <TResult> A task representing the asynchronous operation. When the task completes, its System.Threading.Tasks.Task`1.Result property is set to the result of action . Type Parameters Name Description TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. DoAsync<T, TResult>(T, Func<T, Task<TResult>>) Performs the specified asynchronous operation in an OperationScope , capturing any exception. Declaration public Task<TResult> DoAsync<T, TResult>(T arg, Func<T, Task<TResult>> action) Parameters Type Name Description T arg An argument to pass to action . System.Func <T, System.Threading.Tasks.Task <TResult>> action The operation to perform. Returns Type Description System.Threading.Tasks.Task <TResult> A task representing the asynchronous operation. When the task completes, its System.Threading.Tasks.Task`1.Result property is set to the result of action . Type Parameters Name Description T The type of arg . TResult The type of result produced by action . Exceptions Type Condition System.ArgumentNullException action is null . —or— Attempted to create a scope with a null logger or operation name. System.ArgumentException Attempted to create a scope with an empty operation name. Explicit Interface Implementations IFluent.GetType() Gets the System.Type of the current instance. Declaration Type IFluent.GetType() Returns Type Description System.Type The exact runtime type of the current instance. Implements IFluent"
  },
  "changes.html": {
    "href": "changes.html",
    "title": "Changes in Subatomix.Logging",
    "keywords": "Changes in Subatomix.Logging This file documents all notable changes. Most lines should begin with one of these words: Add , Fix , Update , Change , Deprecate , Remove . <!-- ## [Unreleased](https://github.com/sharpjs/Subatomix.Logging/compare/release/1.0.1..HEAD) (none) ## [1.0.1](https://github.com/sharpjs/Subatomix.Logging/compare/release/1.0.0..release/1.0.1) Future release. --> 1.0.0 Future release. <!--Initial release.--> <!-- Copyright 2022 Jeffrey Sharp Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. -->"
  },
  "index.html": {
    "href": "index.html",
    "title": "Subatomix.Logging",
    "keywords": "Subatomix.Logging Additions to Microsoft.Extensions.Logging in three NuGet packages: Subatomix.Logging PrettyConsoleFormatter – A terse, colorful formatter for Microsoft's console logger . DebuggerLogger – A logger that sends messages to an attached debugger. In Visual Studio, logged messages will appear in the debug output window. OperationScope – A scope representing a logical operation. Automatically logs the start, end, duration, and (optionally) the exception thrown from an operation. ActivityScope – An operation scope that also starts and stops an Activity . The activity carries tags understood by Application Insights , which can present the activity as a dependency telemetry item. Subatomix.Logging.Legacy LoggingTraceListener – A trace listener plugin for the legacy TraceSource API. This listener forwards trace events to ILogger loggers. CorrelationManagerActivityListener – A listener that flows Activity start and stop events to the legacy CorrelationManager facility. Types to assist migration from the Sharp.Diagnostics.Logging package. Subatomix.Logging.Sql SqlLogger – A logger that writes to a table in SQL Server or Azure SQL Database. Status Nearing release. New-ish: New implementation, but based on code with extensive private use in production. Tested: 100% coverage by automated tests. Documented: IntelliSense on everything, plus external documentation . Installation NuGet packages are available. Package Status Subatomix.Logging Subatomix.Logging.Legacy Subatomix.Logging.Sql Building From Source Requirements: Appropriate .NET SDKs — see the target framework(s) specified in each .csproj file. Download .NET SDKs Download .NET Framework Developer Packs Visual Studio 2022 or later (if using Visual Studio). # The default: build and run tests .\\Make.ps1 [-Test] [-Configuration <String>] # Just build; don't run tests .\\Make.ps1 -Build [-Configuration <String>] # Build and run tests w/coverage .\\Make.ps1 -Coverage [-Configuration <String>] <!-- Copyright 2022 Jeffrey Sharp Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. -->"
  }
}